// <auto-generated />
using System;
using GBCSporting2021_.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace GBCSporting2021_.Migrations
{
    [DbContext(typeof(Context))]
    partial class ContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.14-servicing-32113")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("GBCSporting2021_.Models.Country", b =>
                {
                    b.Property<int>("CountryId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("CountryId");

                    b.ToTable("Countries");

                    b.HasData(
                        new { CountryId = 1, Name = "Canada" },
                        new { CountryId = 2, Name = "India" },
                        new { CountryId = 3, Name = "America" },
                        new { CountryId = 4, Name = "Maxico" },
                        new { CountryId = 5, Name = "Pakistan" },
                        new { CountryId = 6, Name = "Russia" },
                        new { CountryId = 7, Name = "China" }
                    );
                });

            modelBuilder.Entity("GBCSporting2021_.Models.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired();

                    b.Property<string>("City")
                        .IsRequired();

                    b.Property<int>("CountryId");

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<string>("Firstname")
                        .IsRequired();

                    b.Property<string>("Lastname")
                        .IsRequired();

                    b.Property<string>("Phone")
                        .IsRequired();

                    b.Property<string>("Postalcode")
                        .IsRequired();

                    b.Property<string>("State")
                        .IsRequired();

                    b.HasKey("CustomerId");

                    b.HasIndex("CountryId");

                    b.ToTable("Customers");

                    b.HasData(
                        new { CustomerId = 1, Address = "45, King Road Street", City = "Toronto", CountryId = 1, Email = "Sahay.Patel123@domain.com", Firstname = "Sahay", Lastname = "Patel", Phone = "123-456-7890", Postalcode = "M1T5Y8", State = "Ontario" },
                        new { CustomerId = 2, Address = "20, bobcat terr", City = "Ahmedabad", CountryId = 2, Email = "Rutik.Patel123@domain.com", Firstname = "Rutik", Lastname = "Patel", Phone = "145-895-7945", Postalcode = "M1B5C9", State = "Gujrat" },
                        new { CustomerId = 3, Address = "20, bobcat terr", City = "Toronto", CountryId = 1, Email = "Namya.Patel123@domain.com", Firstname = "Namya", Lastname = "Patel", Phone = "458-985-9658", Postalcode = "M1B5C9", State = "Ontario" },
                        new { CustomerId = 4, Address = "9, Buckhurt street", City = "Utica", CountryId = 3, Email = "Pruthvi.Soni897@domain.com", Firstname = "Pruthvi", Lastname = "Soni", Phone = "458-987-9696", Postalcode = "M8H8Y9", State = "Newyork" },
                        new { CustomerId = 5, Address = "78, Queen Rode", City = "Brampton", CountryId = 1, Email = "Sahay.Patel123@domain.com", Firstname = "Vishwa", Lastname = "Mavani", Phone = "123-456-7777", Postalcode = "M1U7O5", State = "Ontario" },
                        new { CustomerId = 6, Address = "85, york residency", City = "Mumbai", CountryId = 2, Email = "Harsh.Raval999@domain.com", Firstname = "Harsh", Lastname = "Raval", Phone = "898-456-8890", Postalcode = "F5Y7U6", State = "Maharastra" },
                        new { CustomerId = 7, Address = "65, strong trr", City = "Toronto", CountryId = 1, Email = "Vatsal3@domain.com", Firstname = "Vatsal", Lastname = "Bhavani", Phone = "123-999-7890", Postalcode = "M1T5P5", State = "Ontario" }
                    );
                });

            modelBuilder.Entity("GBCSporting2021_.Models.Incident", b =>
                {
                    b.Property<int>("IncidentId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CustomerId");

                    b.Property<string>("Dateclosed");

                    b.Property<DateTime>("Dateopened");

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<int>("ProductId");

                    b.Property<int>("TechnicianId");

                    b.Property<string>("title")
                        .IsRequired();

                    b.HasKey("IncidentId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ProductId");

                    b.HasIndex("TechnicianId");

                    b.ToTable("Incidents");

                    b.HasData(
                        new { IncidentId = 1, CustomerId = 5, Dateclosed = "", Dateopened = new DateTime(2021, 2, 20, 2, 27, 25, 770, DateTimeKind.Local), Description = "Program fail with error code 510, unable to open database", ProductId = 2, TechnicianId = 2, title = "Error in launching program" },
                        new { IncidentId = 2, CustomerId = 3, Dateclosed = "", Dateopened = new DateTime(2021, 2, 20, 2, 27, 25, 770, DateTimeKind.Local), Description = "Program fail with error code 510, unable to open database", ProductId = 2, TechnicianId = 2, title = "Error in launching program" },
                        new { IncidentId = 3, CustomerId = 4, Dateclosed = "", Dateopened = new DateTime(2021, 2, 20, 2, 27, 25, 770, DateTimeKind.Local), Description = "404 error when chooose exit option and can not exit", ProductId = 5, TechnicianId = 4, title = "Error while choose exit option" },
                        new { IncidentId = 4, CustomerId = 3, Dateclosed = "", Dateopened = new DateTime(2021, 2, 20, 2, 27, 25, 770, DateTimeKind.Local), Description = "database can not load when choose show all project", ProductId = 4, TechnicianId = 6, title = "Error in all project showing " },
                        new { IncidentId = 5, CustomerId = 6, Dateclosed = "", Dateopened = new DateTime(2021, 2, 20, 2, 27, 25, 770, DateTimeKind.Local), Description = "Some time draft can not be tracked", ProductId = 6, TechnicianId = 6, title = "Error in draft track 2.0" },
                        new { IncidentId = 6, CustomerId = 3, Dateclosed = "", Dateopened = new DateTime(2021, 2, 20, 2, 27, 25, 770, DateTimeKind.Local), Description = "Get Error in setting class for reminder", ProductId = 3, TechnicianId = 4, title = "Error in setting Class" }
                    );
                });

            modelBuilder.Entity("GBCSporting2021_.Models.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired();

                    b.Property<string>("Productname")
                        .IsRequired();

                    b.Property<double>("Productprice");

                    b.Property<DateTime>("ReleaseDate");

                    b.HasKey("ProductId");

                    b.ToTable("Products");

                    b.HasData(
                        new { ProductId = 1, Code = "TRM789", Productname = "Tournament Master", Productprice = 8.99, ReleaseDate = new DateTime(2021, 2, 20, 2, 27, 25, 766, DateTimeKind.Local) },
                        new { ProductId = 2, Code = "AT564", Productname = "Accont Tracker", Productprice = 7.99, ReleaseDate = new DateTime(2021, 2, 20, 2, 27, 25, 769, DateTimeKind.Local) },
                        new { ProductId = 3, Code = "CR50", Productname = "Class Reminder 5.0", Productprice = 2.99, ReleaseDate = new DateTime(2021, 2, 20, 2, 27, 25, 769, DateTimeKind.Local) },
                        new { ProductId = 4, Code = "PS9", Productname = "Project Scheduler", Productprice = 8.0, ReleaseDate = new DateTime(2021, 2, 20, 2, 27, 25, 769, DateTimeKind.Local) },
                        new { ProductId = 5, Code = "ST30", Productname = "schedule tracker 3.0", Productprice = 4.89, ReleaseDate = new DateTime(2021, 2, 20, 2, 27, 25, 769, DateTimeKind.Local) },
                        new { ProductId = 6, Code = "TRYT789", Productname = "Draft Manager 2.0", Productprice = 7.69, ReleaseDate = new DateTime(2021, 2, 20, 2, 27, 25, 769, DateTimeKind.Local) }
                    );
                });

            modelBuilder.Entity("GBCSporting2021_.Models.Technician", b =>
                {
                    b.Property<int>("TechnicianId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Technicianemail")
                        .IsRequired();

                    b.Property<string>("Technicianname")
                        .IsRequired();

                    b.Property<string>("Technicianphone")
                        .IsRequired();

                    b.HasKey("TechnicianId");

                    b.ToTable("Technicians");

                    b.HasData(
                        new { TechnicianId = 1, Technicianemail = "MickleRobert@domain.com", Technicianname = "Mickle Robert", Technicianphone = "897-897-8979" },
                        new { TechnicianId = 2, Technicianemail = "PalakVyas@domain.com", Technicianname = "Palak Vyas", Technicianphone = "123-123-1231" },
                        new { TechnicianId = 3, Technicianemail = "MickleRobert@domain.com", Technicianname = "", Technicianphone = "897-897-8979" },
                        new { TechnicianId = 4, Technicianemail = "MickleRobert@domain.com", Technicianname = "Mickle Robert", Technicianphone = "897-897-8979" },
                        new { TechnicianId = 5, Technicianemail = "DeepakarMukhraji@domain.com", Technicianname = "Deepakar Mukhraji", Technicianphone = "147-147-1474" },
                        new { TechnicianId = 6, Technicianemail = "MalharDave@domain.com", Technicianname = "Malhar Dave", Technicianphone = "456-456-4564" }
                    );
                });

            modelBuilder.Entity("GBCSporting2021_.Models.Customer", b =>
                {
                    b.HasOne("GBCSporting2021_.Models.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GBCSporting2021_.Models.Incident", b =>
                {
                    b.HasOne("GBCSporting2021_.Models.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GBCSporting2021_.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GBCSporting2021_.Models.Technician", "Technician")
                        .WithMany()
                        .HasForeignKey("TechnicianId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
